{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Models.Insights;"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "await client.DeleteUserTokenAsync(\"test-user-1\");",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new ClickedObjectIDsAfterSearch\n        {\n          EventType = Enum.Parse<ClickEvent>(\"Click\"),\n          EventName = \"Product Clicked\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1641290601962L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n          QueryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n          Positions = new List<int> { 7, 6 },\n        }\n      ),\n    },\n  }\n);",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "var client = new InsightsClient(\n  new InsightsConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_insights/algolia_client_insights.dart';"
    },
    "customDelete": {
      "default": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "final response = await client.customGet(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "final response = await client.customPost(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "final response = await client.customPut(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "await client.deleteUserToken(\n  userToken: \"test-user-1\",\n);",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      ClickedObjectIDsAfterSearch(\n        eventType: ClickEvent.fromJson(\"click\"),\n        eventName: \"Product Clicked\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1641290601962,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions: [\n          7,\n          6,\n        ],\n      ),\n    ],\n  ),\n);",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "final client = InsightsClient(\n    appId: 'ALGOLIA_APPLICATION_ID',\n    apiKey: 'ALGOLIA_API_KEY',\n    region: 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/insights\""
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "err = client.DeleteUserToken(client.NewApiDeleteUserTokenRequest(\n  \"test-user-1\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.ClickedObjectIDsAfterSearchAsEventsItems(\n      insights.NewEmptyClickedObjectIDsAfterSearch().SetEventType(insights.ClickEvent(\"click\")).SetEventName(\"Product Clicked\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1641290601962).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}).SetQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\").SetPositions(\n        []int32{7, 6}))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\",\n)\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "client, err := insights.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", insights.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.InsightsClient;\nimport com.algolia.model.insights.*;"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "client.deleteUserToken(\"test-user-1\");",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new ClickedObjectIDsAfterSearch()\n          .setEventType(ClickEvent.CLICK)\n          .setEventName(\"Product Clicked\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1641290601962L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n          .setQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\")\n          .setPositions(Arrays.asList(7, 6))\n      )\n    )\n);",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "InsightsClient client = new InsightsClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "await client.deleteUserToken({ userToken: 'test-user-1' });",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'click',\n      eventName: 'Product Clicked',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1641290601962,\n      objectIDs: ['9780545139700', '9780439784542'],\n      queryID: '43b15df305339e827f0ac0bdc5ebcaa7',\n      positions: [7, 6],\n    },\n  ],\n});",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "// Replace 'us' with your Algolia Application Region\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initInsights({ region: 'us' });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.InsightsClient"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "client.deleteUserToken(\n  userToken = \"test-user-1\",\n)",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      ClickedObjectIDsAfterSearch(\n        eventType = ClickEvent.entries.first { it.value == \"click\" },\n        eventName = \"Product Clicked\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1641290601962L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions = listOf(7, 6),\n      ),\n    ),\n  ),\n)",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "val client = InsightsClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\", region = \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\InsightsClient;"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "$client->deleteUserToken(\n    'test-user-1',\n);",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'click',\n            'eventName' => 'Product Clicked',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1641290601962,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n            'queryID' => '43b15df305339e827f0ac0bdc5ebcaa7',\n            'positions' => [\n                7,\n\n                6,\n            ],\n        ],\n    ],\n    ],\n);",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "$client = InsightsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.insights.client import InsightsClientSync"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "client.delete_user_token(\n    user_token=\"test-user-1\",\n)",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"click\",\n                \"eventName\": \"Product Clicked\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1641290601962,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n                \"queryID\": \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                \"positions\": [\n                    7,\n                    6,\n                ],\n            },\n        ],\n    },\n)",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "# In an asynchronous context, you can use InsightsClient instead, which exposes the exact same methods.\nclient = InsightsClientSync(\n    \"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "client.delete_user_token(\"test-user-1\")",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::ClickedObjectIDsAfterSearch.new(\n        event_type: \"click\",\n        event_name: \"Product Clicked\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1641290601962,\n        object_ids: [\"9780545139700\", \"9780439784542\"],\n        query_id: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions: [7, 6]\n      )\n    ]\n  )\n)",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "client = Algolia::InsightsClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.InsightsClient"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "client.deleteUserToken(\n  userToken = \"test-user-1\"\n)",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "val response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = Seq(\n      ClickedObjectIDsAfterSearch(\n        eventType = ClickEvent.withName(\"click\"),\n        eventName = \"Product Clicked\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = Some(\"user-123456\"),\n        timestamp = Some(1641290601962L),\n        objectIDs = Seq(\"9780545139700\", \"9780439784542\"),\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions = Seq(7, 6)\n      )\n    )\n  )\n)",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "init": {
      "default": "val client = InsightsClient(\n  appId = \"ALGOLIA_APPLICATION_ID\",\n  apiKey = \"ALGOLIA_API_KEY\",\n  region = Option(\"ALGOLIA_APPLICATION_REGION\")\n)"
    }
  },
  "swift": {
    "import": {
      "default": "import Insights"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteUserToken": {
      "default": "try await client.deleteUserToken(userToken: \"test-user-1\")",
      "parameters": [
        {
          "name": "userToken",
          "in": "path",
          "description": "User token for which to delete all associated events.",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 129,
            "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
            "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
            "example": "test-user-1"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content.",
          "headers": {
            "x-ratelimit-limit": {
              "description": "Number of allowed requests per one minute.",
              "example": 100,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-remaining": {
              "description": "Number of remaining requests in the current period.",
              "example": 99,
              "schema": {
                "type": "integer"
              }
            },
            "x-ratelimit-reset": {
              "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
              "example": 1710682486,
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        },
        "429": {
          "description": "Too Many Requests. This operation is rate-limited. Check the `x-ratelimit-limit` and `x-ratelimit-reset` headers of the response.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              }
            }
          }
        }
      }
    },
    "pushEvents": {
      "default": "let response = try await client\n    .pushEvents(insightsEvents: InsightsEvents(events: [\n        EventsItems\n            .clickedObjectIDsAfterSearch(ClickedObjectIDsAfterSearch(\n                eventName: \"Product Clicked\",\n                eventType: ClickEvent.click,\n                index: \"products\",\n                objectIDs: [\"9780545139700\", \"9780439784542\"],\n                positions: [7, 6],\n                queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                userToken: \"user-123456\",\n                authenticatedUserToken: \"user-123456\",\n                timestamp: Int64(1_641_290_601_962)\n            )),\n    ]))",
      "parameters": [
        {
          "events": {
            "type": "array",
            "description": "Click and conversion events.\n\n**All** events must be valid, otherwise the API returns an error.\n",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Clicked object IDs after search",
                  "description": "Click event after an Algolia request.\n\nUse this event to track when users click items in the search results.\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "minimum": 1,
                      "minItems": 1,
                      "maxItems": 20,
                      "description": "Position of the clicked item the search results.\n\nYou must provide 1 `position` for each `objectID`.\n",
                      "example": [
                        1,
                        2,
                        5
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "positions",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "positions",
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs after search",
                  "description": "Use this event to track when users add items to their shopping cart after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "queryID",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs after search",
                  "description": "Use this event to track when users make a purchase after a previous Algolia request.\nIf you're building your category pages with Algolia, you'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart events.\n\nIf provided, it must be the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "queryID": {
                            "type": "string",
                            "pattern": "[0-9a-f]{32}",
                            "minLength": 32,
                            "maxLength": 32,
                            "description": "Unique identifier for a search query, used to track purchase events with multiple records that originate from different searches.",
                            "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                          },
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken",
                    "objectData"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs",
                    "objectData"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs after search",
                  "description": "Use this event to track when users convert after a previous Algolia request.\nFor example, a user clicks on an item in the search results to view the product detail page.\nThen, the user adds the item to their shopping cart.\n\nIf you're building your category pages with Algolia,\nyou'll also use this event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "queryID": {
                      "type": "string",
                      "pattern": "[0-9a-f]{32}",
                      "minLength": 32,
                      "maxLength": 32,
                      "description": "Unique identifier for a search query.\n\nThe query ID is required for events related to search or browse requests.\nIf you add `clickAnalytics: true` as a search request parameter, the query ID is included in the API response.\n",
                      "example": "3e48cd0616e466948dd85abf5c3fbbe2"
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "queryID",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "queryID",
                    "eventType"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked object IDs",
                  "description": "Use this event to track when users click items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track click events related to Algolia requests, use the \"Clicked object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Purchased object IDs",
                  "description": "Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "purchase"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Added to cart object IDs",
                  "description": "Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.\n\nTo track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "eventSubtype": {
                      "type": "string",
                      "enum": [
                        "addToCart"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).",
                      "example": "EUR"
                    },
                    "objectData": {
                      "type": "array",
                      "description": "Extra information about the records involved in a purchase or add-to-cart event.\n\nIf specified, it must have the same length as `objectIDs`.\n",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "price": {
                            "description": "Total price of a product, including any discounts, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 9.99
                              },
                              {
                                "type": "string",
                                "example": "9.99"
                              }
                            ]
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int32",
                            "example": 2,
                            "description": "Quantity of a product that has been purchased or added to the cart.\nThe total purchase value is the sum of `quantity` multiplied with the `price` for each purchased item.\n"
                          },
                          "discount": {
                            "description": "Absolute value of the discount for this product, in units of `currency`.",
                            "oneOf": [
                              {
                                "type": "number",
                                "format": "double",
                                "example": 20
                              },
                              {
                                "type": "string",
                                "example": "20"
                              }
                            ]
                          }
                        }
                      },
                      "minItems": 1,
                      "maxItems": 20
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    },
                    "value": {
                      "description": "Total monetary value of this event in units of `currency`.",
                      "oneOf": [
                        {
                          "type": "number",
                          "format": "double",
                          "example": 1000
                        },
                        {
                          "type": "string",
                          "example": "1000.00"
                        }
                      ]
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "eventSubtype",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "eventSubtype",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted object IDs",
                  "description": "Use this event to track when users convert on items unrelated to a previous Algolia request.\nFor example, if you don't use Algolia to build your category pages, use this event.\n\nTo track conversion events related to Algolia requests, use the \"Converted object IDs after search\" event.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Clicked filters",
                  "description": "Use this event to track when users click facet filters in your user interface.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "click"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Converted filters",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "conversion"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed object IDs",
                  "description": "Use this event to track when users viewed items in the search results.",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "objectIDs": {
                      "type": "array",
                      "description": "Object IDs of the records that are part of the event.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "object-1",
                        "object-2",
                        "object-3"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "objectIDs",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "objectIDs"
                  ]
                },
                {
                  "type": "object",
                  "title": "Viewed filters",
                  "description": "Use this method to capture active filters.\nFor example, when browsing a category page,\nusers see content filtered on that specific category.\n",
                  "additionalProperties": false,
                  "properties": {
                    "eventName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "pattern": "[\\x20-\\x7E]{1,64}",
                      "description": "Event name, up to 64 ASCII characters.\n\nConsider naming events consistently—for example, by adopting Segment's\n[object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)\nframework.\n"
                    },
                    "eventType": {
                      "type": "string",
                      "enum": [
                        "view"
                      ]
                    },
                    "index": {
                      "type": "string",
                      "description": "Index name (case-sensitive) to which the event's items belong.",
                      "example": "ALGOLIA_INDEX_NAME"
                    },
                    "filters": {
                      "type": "array",
                      "description": "Applied facet filters.\n\nFacet filters are `facet:value` pairs.\nFacet values must be URL-encoded, such as, `discount:10%25`.\n",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "maxItems": 20,
                      "example": [
                        "brand:apple"
                      ]
                    },
                    "userToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Anonymous or pseudonymous user identifier.\n\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "test-user-1"
                    },
                    "authenticatedUserToken": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 129,
                      "pattern": "[a-zA-Z0-9_=/+-]{1,129}",
                      "description": "Identifier for authenticated users.\n\nWhen the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`.\nThis lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions.\nDon't use personally identifiable information in user tokens.\nFor more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
                      "example": "c6a52c02-d0c7-4b53-8ce3-2b8fd202f3f9"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Timestamp of the event, measured in milliseconds since the Unix epoch.\nBy default, the Insights API uses the time it receives an event as its timestamp.\n",
                      "example": 1687193127
                    }
                  },
                  "required": [
                    "eventName",
                    "eventType",
                    "index",
                    "filters",
                    "userToken"
                  ],
                  "x-discriminator-fields": [
                    "eventType",
                    "filters"
                  ]
                }
              ]
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Success": {
                  "summary": "Events successfully sent to the Insights API",
                  "description": "Success indicates that the Insights API received the events correctly, and that event properties are formatted correctly. Success doesn't imply that the event can be used by any Algolia feature. For example, the Insights API doesn't check if the index name you provided exists, or if the object IDs exist in your index.",
                  "value": {
                    "status": 200,
                    "message": "OK"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad Request.",
          "content": {
            "text/html": {
              "schema": {
                "type": "string",
                "title": "HTML"
              },
              "examples": {
                "BadRequest": {
                  "summary": "Bad request",
                  "description": "This error doesn't return a JSON object, but HTML.",
                  "value": "Error: Bad Request. Your client has issued a malformed or illegal request."
                }
              }
            }
          }
        },
        "401": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "Unauthorized": {
                  "summary": "Invalid credentials",
                  "description": "You need to provide your application ID using the `X-Algolia-Application-ID` header and your (search) API key with the `X-Algolia-API-Key` header.",
                  "value": {
                    "status": 401,
                    "message": "Invalid credentials"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Not Found.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "NotFound": {
                  "summary": "Unsupported operation",
                  "description": "Check that you're using the correct URL.",
                  "value": {
                    "status": 404,
                    "message": "Path not supported by Insights REST API. Please have a look at [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/) for the list of valid commands."
                  }
                }
              }
            }
          }
        },
        "405": {
          "description": "Method Not Allowed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "MethodNotAllowed": {
                  "summary": "Method not allowed",
                  "description": "Check, that you send events with the `POST` method.",
                  "value": {
                    "status": 405,
                    "message": "Method Not Allowed"
                  }
                }
              }
            }
          }
        },
        "413": {
          "description": "Payload Too Large.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "PayloadTooLarge": {
                  "summary": "Request body larger than 2&nbspMB",
                  "value": {
                    "status": 413,
                    "message": "Request Entity Too Large"
                  }
                }
              }
            }
          }
        },
        "422": {
          "description": "Unprocessable Entity.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The response of the Insights API.",
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Details about the response, such as error messages."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The HTTP status code of the response."
                  }
                }
              },
              "examples": {
                "InvalidPayload": {
                  "summary": "Incorrect event object",
                  "value": {
                    "status": 422,
                    "message": "Invalid payload"
                  }
                },
                "NoEvents": {
                  "summary": "No events",
                  "description": "This can happen if you're sending an empty `events` array, or if you try to send a single event object instead of the `events` array.",
                  "value": {
                    "status": 422,
                    "message": "No events to process"
                  }
                },
                "NoEventsField": {
                  "summary": "Missing events attribute",
                  "description": "This can happen if you try to send an array of events directly instead of using the `events` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field : expected insights.PublicEventsBatch, got array"
                  }
                },
                "EventNameRequired": {
                  "summary": "Missing eventName attribute",
                  "value": {
                    "status": 422,
                    "message": "EventName is required"
                  }
                },
                "WrongEventName": {
                  "summary": "Event name too long or wrong characters",
                  "value": {
                    "status": 422,
                    "message": "EventName must contain only visible ASCII characters, and be between 1 and 64 characters long"
                  }
                },
                "EventTypeRequired": {
                  "summary": "Missing eventType attribute",
                  "value": {
                    "status": 422,
                    "message": "EventType is required"
                  }
                },
                "WrongEventType": {
                  "summary": "Wrong event type",
                  "value": {
                    "status": 422,
                    "message": "EventType must be one of \"click\", \"conversion\" or \"view\""
                  }
                },
                "IndexRequired": {
                  "summary": "Missing index attribute",
                  "value": {
                    "status": 422,
                    "message": "The index field is required"
                  }
                },
                "UserTokenRequired": {
                  "summary": "Missing userToken attribute",
                  "value": {
                    "status": 422,
                    "message": "The userToken field is required"
                  }
                },
                "WrongUserToken": {
                  "summary": "Malformed user token",
                  "value": {
                    "status": 422,
                    "message": "UserToken must contain only alphanumeric, equal, plus, slash, hyphen, or underscore characters, and be between 1 and 128 characters long"
                  }
                },
                "NoObjectIDsOrFilters": {
                  "summary": "Missing objectIDs or filters attribute",
                  "description": "Each event must include either the `objectIDs` or `filters` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event should specify either some ObjectIDs or some Filters"
                  }
                },
                "BothDefined": {
                  "summary": "Both objectIDs and filters attributes defined",
                  "value": {
                    "status": 422,
                    "message": "Event should specify ObjectIDs or Filters, but not both"
                  }
                },
                "PositionsOnWrongEventType": {
                  "summary": "Wrong combination of positions and eventType attributes",
                  "value": {
                    "status": 422,
                    "message": "Only event of type click should specify the positions attribute"
                  }
                },
                "PositionsWithoutQueryID": {
                  "summary": "Positions attribute without queryID",
                  "description": "Click events with the `positions` attribute require the `queryID` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click with positions should specify a queryID"
                  }
                },
                "WrongPositionsValue": {
                  "summary": "Wrong value in positions array",
                  "description": "Any value in the `positions` array must be greater than 0.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click may only have strictly positive positions"
                  }
                },
                "WrongPositionsItems": {
                  "summary": "Wrong number of items in positions array",
                  "description": "For click events with the `queryID` and `objectIDs` attributes, you must include the `positions` attribute with the same number of items as the `objectIDs` attribute.",
                  "value": {
                    "status": 422,
                    "message": "Event of type click should have the same number of ObjectIDs and Positions"
                  }
                },
                "WrongQueryID": {
                  "summary": "Malformed query ID",
                  "value": {
                    "status": 422,
                    "message": "Query ID must be a search query ID (32 characters hexadecimal string)"
                  }
                },
                "InvalidDataType": {
                  "summary": "Wrong data type",
                  "description": "This can happen if one or more attribute is a number instead of a string.",
                  "value": {
                    "status": 422,
                    "message": "Invalid type for field events: expected string, got number"
                  }
                },
                "InvalidTimestamp": {
                  "summary": "Timestamp too old",
                  "value": {
                    "status": 422,
                    "message": "The timestamp must be at most 4 days in the past"
                  }
                },
                "TooManyEvents": {
                  "summary": "Too many events",
                  "description": "You can include up to 1,000 events in a single API request.",
                  "value": {
                    "status": 422,
                    "message": "Cannot process more than 1000 events in a batch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "let client = try InsightsClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\", region: .us)"
    }
  }
}