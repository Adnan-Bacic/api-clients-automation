{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Models.Recommend;"
    },
    "batchRecommendRules": {
      "default": "var response = await client.BatchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "var response = await client.DeleteRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "var response = await client.GetRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "var response = await client.GetRecommendStatusAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  12345L\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 42.1,\n        }\n      ),\n    },\n  }\n);",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "var response = await client.SearchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "var client = new RecommendClient(\n  new RecommendConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_recommend/algolia_client_recommend.dart';"
    },
    "batchRecommendRules": {
      "default": "final response = await client.batchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "final response = await client.customGet(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "final response = await client.customPost(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "final response = await client.customPut(\n  path: \"test/minimal\",\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "final response = await client.deleteRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "final response = await client.getRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "final response = await client.getRecommendStatus(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  taskID: 12345,\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 42.1,\n      ),\n    ],\n  ),\n);",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "final response = await client.searchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "final client = RecommendClient(\n    appId: 'ALGOLIA_APPLICATION_ID', apiKey: 'ALGOLIA_API_KEY');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/recommend\""
    },
    "batchRecommendRules": {
      "default": "response, err := client.BatchRecommendRules(client.NewApiBatchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "response, err := client.DeleteRecommendRule(client.NewApiDeleteRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "response, err := client.GetRecommendRule(client.NewApiGetRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "response, err := client.GetRecommendStatus(client.NewApiGetRecommendStatusRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), 12345,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(42.1))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "response, err := client.SearchRecommendRules(client.NewApiSearchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\",\n)\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "client, err := recommend.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.RecommendClient;\nimport com.algolia.model.recommend.*;"
    },
    "batchRecommendRules": {
      "default": "client.batchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "client.deleteRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "client.getRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "client.getRecommendStatus(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, 12345L);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(42.1)\n      )\n    )\n);",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "client.searchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "RecommendClient client = new RecommendClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "batchRecommendRules": {
      "default": "const response = await client.batchRecommendRules({ indexName: 'indexName', model: 'related-products' });",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "const response = await client.deleteRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "const response = await client.getRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "const response = await client.getRecommendStatus({\n  indexName: 'indexName',\n  model: 'related-products',\n  taskID: 12345,\n});",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "const response = await client.getRecommendations({\n  requests: [{ indexName: 'indexName', objectID: 'objectID', model: 'related-products', threshold: 42.1 }],\n});",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "const response = await client.searchRecommendRules({ indexName: 'indexName', model: 'related-products' });",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "//\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.RecommendClient"
    },
    "batchRecommendRules": {
      "default": "var response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "var response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "var response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "var response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  taskID = 12345L,\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 42.1,\n      ),\n    ),\n  ),\n)",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "var response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\RecommendClient;"
    },
    "batchRecommendRules": {
      "default": "$response = $client->batchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "$response = $client->deleteRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "$response = $client->getRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "$response = $client->getRecommendStatus(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    12345,\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID',\n            'model' => 'related-products',\n            'threshold' => 42.1,\n        ],\n    ],\n    ],\n);",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "$response = $client->searchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "$client = RecommendClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.recommend.client import RecommendClientSync"
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    task_id=12345,\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID\",\n                \"model\": \"related-products\",\n                \"threshold\": 42.1,\n            },\n        ],\n    },\n)",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "# In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.\nclient = RecommendClientSync(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\"<YOUR_INDEX_NAME>\", \"related-products\", 12345)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        object_id: \"objectID\",\n        model: \"related-products\",\n        threshold: 42.1\n      )\n    ]\n  )\n)",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "client = Algolia::RecommendClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.RecommendClient"
    },
    "batchRecommendRules": {
      "default": "val response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "val response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "val response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "val response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  taskID = 12345L\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 42.1\n      )\n    )\n  )\n)",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "val response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "swift": {
    "import": {
      "default": "import Recommend"
    },
    "batchRecommendRules": {
      "default": "let response = try await client.batchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Response, taskID, and update timestamp.",
                "additionalProperties": false,
                "required": [
                  "taskID",
                  "updatedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2023-07-04T12:49:15Z",
                    "description": "Date and time when the object was updated, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")",
      "parameters": [
        {
          "name": "path",
          "in": "path",
          "description": "Path of the endpoint, anything after \"/1\" must be specified.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "/keys"
          }
        },
        {
          "name": "parameters",
          "in": "query",
          "description": "Query parameters to apply to the current query.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "deleteRecommendRule": {
      "default": "let response = try await client.deleteRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "deletedAtResponse",
                "description": "Response, taskID, and deletion timestamp.",
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "taskID",
                  "deletedAt"
                ],
                "properties": {
                  "taskID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1514562690001,
                    "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
                  },
                  "deletedAt": {
                    "type": "string",
                    "example": "2023-06-27T14:42:38.831Z",
                    "description": "Date and time when the object was deleted, in RFC 3339 format."
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendRule": {
      "default": "let response = try await client.getRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "objectID",
          "in": "path",
          "description": "Unique record identifier.",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique record identifier.",
            "example": "test-record-123"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Recommend rule.",
                "additionalProperties": false,
                "properties": {
                  "_metadata": {
                    "title": "ruleMetadata",
                    "type": "object",
                    "description": "Rule metadata.",
                    "properties": {
                      "lastUpdate": {
                        "type": "string",
                        "example": "2023-07-04T12:49:15Z",
                        "description": "Date and time when the object was updated, in RFC 3339 format."
                      }
                    }
                  },
                  "objectID": {
                    "title": "objectID",
                    "type": "string",
                    "description": "Unique identifier of a rule object."
                  },
                  "condition": {
                    "type": "object",
                    "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                    "properties": {
                      "filters": {
                        "type": "string",
                        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                        "example": "(category:Book OR category:Ebook) AND _tags:published",
                        "x-categories": [
                          "Filtering"
                        ]
                      },
                      "context": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9_-]+",
                        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                        "example": "mobile"
                      }
                    }
                  },
                  "consequence": {
                    "type": "object",
                    "description": "Effect of the rule.",
                    "properties": {
                      "hide": {
                        "type": "array",
                        "description": "Exclude items from recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID of the recommendation you want to exclude.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            }
                          }
                        }
                      },
                      "promote": {
                        "type": "array",
                        "description": "Place items at specific positions in the list of recommendations.",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "Object ID and position of the recommendation you want to pin.",
                          "properties": {
                            "objectID": {
                              "type": "string",
                              "description": "Unique record identifier.",
                              "example": "test-record-123"
                            },
                            "position": {
                              "type": "integer",
                              "description": "Index in the list of recommendations where to place this item.",
                              "minimum": 0
                            }
                          }
                        }
                      },
                      "params": {
                        "type": "object",
                        "description": "Filter or boost recommendations matching a facet filter.",
                        "properties": {
                          "automaticFacetFilters": {
                            "type": "array",
                            "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                            "items": {
                              "type": "object",
                              "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                              "properties": {
                                "facet": {
                                  "type": "string",
                                  "description": "Facet attribute."
                                },
                                "negative": {
                                  "type": "boolean",
                                  "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                }
                              }
                            }
                          },
                          "filters": {
                            "type": "string",
                            "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                            "example": "(category:Book OR category:Ebook) AND _tags:published",
                            "x-categories": [
                              "Filtering"
                            ]
                          },
                          "optionalFilters": {
                            "type": "array",
                            "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "category:books<score=1>",
                              "category:-movies<score=1>"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                    "example": "Boost on-sale items"
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                  },
                  "validity": {
                    "type": "array",
                    "description": "Time periods when the rule is active.",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "from": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should start to be active, in Unix epoch time."
                        },
                        "until": {
                          "type": "integer",
                          "format": "int64",
                          "description": "When the rule should stop to be active, in Unix epoch time."
                        }
                      },
                      "required": [
                        "from",
                        "until"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendStatus": {
      "default": "let response = try await client.getRecommendStatus(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    taskID: Int64(12345)\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "name": "taskID",
          "in": "path",
          "description": "Unique task identifier.",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64",
            "example": 1514562690001,
            "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendTaskResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "published",
                      "notPublished"
                    ],
                    "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "getRecommendations": {
      "default": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                model: RelatedModel.relatedProducts,\n                objectID: \"objectID\"\n            )),\n    ]))",
      "parameters": [
        {
          "requests": {
            "type": "array",
            "description": "Recommendation request with parameters depending on the requested model.",
            "items": {
              "$ref": "#/components/schemas/recommendationsRequest"
            }
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "getRecommendationsResponse",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/recommendationsResults"
                    }
                  }
                },
                "required": [
                  "results"
                ]
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "searchRecommendRules": {
      "default": "let response = try await client.searchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)",
      "parameters": [
        {
          "name": "indexName",
          "in": "path",
          "description": "Name of the index on which to perform the operation.",
          "required": true,
          "schema": {
            "type": "string",
            "example": "ALGOLIA_INDEX_NAME"
          }
        },
        {
          "in": "path",
          "name": "model",
          "required": true,
          "description": "[Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).\n",
          "schema": {
            "type": "string",
            "enum": [
              "related-products",
              "bought-together",
              "trending-facets",
              "trending-items"
            ]
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        },
        {
          "query": {
            "type": "string",
            "description": "Search query.",
            "default": ""
          },
          "context": {
            "type": "string",
            "description": "Only search for rules with matching context.",
            "example": "mobile"
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "hitsPerPage": {
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to only show rules where the value of their `enabled` property matches this parameter.\nIf absent, show all rules, regardless of their `enabled` property.\n"
          },
          "filters": {
            "type": "string",
            "description": "Filter expression. This only searches for rules matching the filter expression.",
            "example": "objectID:rr-123456"
          },
          "facets": {
            "type": "array",
            "description": "Include facets and facet values in the response. Use `['*']` to include all facets.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string",
              "description": "Facet name for rule objects or `*` as wildcard character.",
              "example": "condition.context"
            }
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of values to return for each facet.",
            "minimum": 1,
            "maximum": 1000
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRecommendRulesResponse",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "hits",
                  "nbHits",
                  "page",
                  "nbPages"
                ],
                "properties": {
                  "hits": {
                    "type": "array",
                    "description": "Recommend rules that match the search criteria.",
                    "items": {
                      "type": "object",
                      "description": "Recommend rule.",
                      "additionalProperties": false,
                      "properties": {
                        "_metadata": {
                          "title": "ruleMetadata",
                          "type": "object",
                          "description": "Rule metadata.",
                          "properties": {
                            "lastUpdate": {
                              "type": "string",
                              "example": "2023-07-04T12:49:15Z",
                              "description": "Date and time when the object was updated, in RFC 3339 format."
                            }
                          }
                        },
                        "objectID": {
                          "title": "objectID",
                          "type": "string",
                          "description": "Unique identifier of a rule object."
                        },
                        "condition": {
                          "type": "object",
                          "description": "Condition that triggers the rule.\nIf not specified, the rule is triggered for all recommendations.\n",
                          "properties": {
                            "filters": {
                              "type": "string",
                              "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                              "example": "(category:Book OR category:Ebook) AND _tags:published",
                              "x-categories": [
                                "Filtering"
                              ]
                            },
                            "context": {
                              "type": "string",
                              "pattern": "[A-Za-z0-9_-]+",
                              "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
                              "example": "mobile"
                            }
                          }
                        },
                        "consequence": {
                          "type": "object",
                          "description": "Effect of the rule.",
                          "properties": {
                            "hide": {
                              "type": "array",
                              "description": "Exclude items from recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID of the recommendation you want to exclude.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  }
                                }
                              }
                            },
                            "promote": {
                              "type": "array",
                              "description": "Place items at specific positions in the list of recommendations.",
                              "minItems": 1,
                              "items": {
                                "type": "object",
                                "description": "Object ID and position of the recommendation you want to pin.",
                                "properties": {
                                  "objectID": {
                                    "type": "string",
                                    "description": "Unique record identifier.",
                                    "example": "test-record-123"
                                  },
                                  "position": {
                                    "type": "integer",
                                    "description": "Index in the list of recommendations where to place this item.",
                                    "minimum": 0
                                  }
                                }
                              }
                            },
                            "params": {
                              "type": "object",
                              "description": "Filter or boost recommendations matching a facet filter.",
                              "properties": {
                                "automaticFacetFilters": {
                                  "type": "array",
                                  "description": "Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.",
                                  "items": {
                                    "type": "object",
                                    "description": "Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.",
                                    "properties": {
                                      "facet": {
                                        "type": "string",
                                        "description": "Facet attribute."
                                      },
                                      "negative": {
                                        "type": "boolean",
                                        "description": "Whether the filter is negative.\nIf true, recommendations must not have the same value for the `facet` attribute.\nIf false, recommendations must have the same value for the `facet` attribute.\n"
                                      }
                                    }
                                  }
                                },
                                "filters": {
                                  "type": "string",
                                  "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
                                  "example": "(category:Book OR category:Ebook) AND _tags:published",
                                  "x-categories": [
                                    "Filtering"
                                  ]
                                },
                                "optionalFilters": {
                                  "type": "array",
                                  "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nMatches with higher weights (`<score=N>`) rank before matches with lower weights.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "category:books<score=1>",
                                    "category:-movies<score=1>"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.",
                          "example": "Boost on-sale items"
                        },
                        "enabled": {
                          "type": "boolean",
                          "default": true,
                          "description": "Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time."
                        },
                        "validity": {
                          "type": "array",
                          "description": "Time periods when the rule is active.",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should start to be active, in Unix epoch time."
                              },
                              "until": {
                                "type": "integer",
                                "format": "int64",
                                "description": "When the rule should stop to be active, in Unix epoch time."
                              }
                            },
                            "required": [
                              "from",
                              "until"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "nbHits": {
                    "type": "integer",
                    "description": "Number of results (hits).",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page of search results to retrieve.",
                    "default": 0,
                    "minimum": 0,
                    "x-categories": [
                      "Pagination"
                    ]
                  },
                  "nbPages": {
                    "type": "integer",
                    "description": "Number of pages of results.",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request or request arguments.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "402": {
          "description": "This feature is not enabled on your Algolia account.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "403": {
          "description": "Method not allowed with this API key.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Index not found.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Error.",
                "type": "object",
                "x-keep-model": true,
                "additionalProperties": true,
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Invalid Application-Id or API-Key"
                  }
                }
              }
            }
          }
        }
      }
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")",
      "parameters": [
        {
          "in": "query",
          "name": "apiKey",
          "description": "API key to be used from now on.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No content."
        }
      }
    },
    "init": {
      "default": "let client = try RecommendClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\")"
    }
  }
}